* Emacs Configuration
** Packages
*** Package Setup
#+BEGIN_SRC emacs-lisp
(require 'package)

(setq package-archives
      '(("gnu" . "https://elpa.gnu.org/packages/")
	("marmalade" . "https://marmalade-repo.org/packages/")
	("melpa" . "https://melpa.org/packages/")))

(package-initialize)

(defvar my-packages '(cider
                      ac-cider
		      ac-js2
		      auto-complete
		      clj-refactor
		      clojure-mode
		      coffee-mode
		      enh-ruby-mode
		      flycheck
		      flycheck-clojure
		      flycheck-pos-tip
		      graphviz-dot-mode
		      impatient-mode
		      js2-mode
		      magit
		      markdown-mode
		      projectile
		      sass-mode
		      tern
		      tern-auto-complete
		      web-mode
		      yaml-mode
		      skewer-mode))

(dolist (p my-packages)
  (unless (package-installed-p p)
    (package-install p)))

;;(defun package (pkg)
;;  (unless (package-installed-p pkg)
;;    (package-install pkg)))
#+END_SRC
*** projectile

[[http://projectile.readthedocs.io/en/latest/][Projectile Docs]]

#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-x f") 'projectile-find-file)
#+END_SRC
*** auto-complete

[[https://github.com/auto-complete/auto-complete/blob/master/doc/manual.md][Auto-Complete User Manual]]

#+BEGIN_SRC emacs-lisp
(ac-config-default)

(eval-after-load "auto-complete"
  '(progn
     (add-to-list 'ac-modes 'coffee-mode)))
#+END_SRC
*** cider

[[https://cider.readthedocs.io/en/latest/][Cider Docs]]

#+BEGIN_SRC emacs-lisp
(require 'ac-cider)
(add-hook 'cider-mode-hook 'ac-flyspell-workaround)
(add-hook 'cider-mode-hook 'ac-cider-setup)
(add-hook 'cider-repl-mode-hook 'ac-cider-setup)
(eval-after-load "auto-complete"
  '(progn
     (add-to-list 'ac-modes 'cider-mode)
     (add-to-list 'ac-modes 'cider-repl-mode)))
#+END_SRC
*** flycheck
#+BEGIN_SRC emacs-lisp
(add-hook 'after-init-hook #'global-flycheck-mode)

(eval-after-load 'flycheck
  '(setq flycheck-display-errors-function #'flycheck-pos-tip-error-messages))
#+END_SRC
*** flyspell
The german dictionary has been installed taken from here:
http://fmg-www.cs.ucla.edu/geoff/ispell-dictionaries.html#German-dicts
#+BEGIN_SRC emacs-lisp
(setq flyspell-sort-corrections nil)

(defun flyspell-switch-dictionary()
  "Switch between German and English dictionaries"
  (interactive)
  (let* ((dic ispell-current-dictionary)
         (change (if (string= dic "deutsch") "english" "deutsch")))
    (ispell-change-dictionary change)
    (message "Dictionary switched from %s to %s" dic change)))
#+END_SRC
*** tern
#+BEGIN_SRC emacs-lisp
(add-hook 'js-mode-hook (lambda () (tern-mode t)))
(add-hook 'coffee-mode-hook (lambda () (tern-mode t)))

(eval-after-load 'tern
  '(progn
     (require 'tern-auto-complete)
     (tern-ac-setup)))
#+END_SRC
*** org-mode
#+BEGIN_SRC emacs-lisp
(custom-set-faces
 '(org-link ((t (:foreground "yellow"))))
 '(org-table ((t nil))))
#+END_SRC
** Custom Easy Templates
#+BEGIN_SRC emacs-lisp
(add-to-list 'org-structure-template-alist
  '("m" "#+BEGIN_SRC emacs-lisp\n?\n#+END_SRC" "<src lang=\"emacs-lisp\">?</src>"))
#+END_SRC
**** Tufte Books & Handouts
#+BEGIN_SRC emacs-lisp
(require 'ox-latex)
;; tufte-book class for writing classy books
(add-to-list 'org-latex-classes
             '("tuftebook"
               "\\documentclass{tufte-book}
                \\usepackage{color}
                \\usepackage{amssymb}
                \\usepackage{gensymb}
                \\usepackage{nicefrac}
                \\usepackage{units}"
               ("\\section{%s}" . "\\section*{%s}")
               ("\\subsection{%s}" . "\\subsection*{%s}")
               ("\\paragraph{%s}" . "\\paragraph*{%s}")
               ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))

;; tufte-handout class for writing classy handouts and papers
(add-to-list 'org-latex-classes
             '("tuftehandout"
               "\\documentclass{tufte-handout}
                \\usepackage{color}
                \\usepackage{amssymb}
                \\usepackage{amsmath}
                \\usepackage{gensymb}
                \\usepackage{nicefrac}
                \\usepackage{units}"
               ("\\section{%s}" . "\\section*{%s}")
               ("\\subsection{%s}" . "\\subsection*{%s}")
               ("\\paragraph{%s}" . "\\paragraph*{%s}")
               ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))

(add-to-list 'org-latex-classes
             '("scrartcl"
               "\\documentclass{scrartcl}"
               ("\\section{%s}" . "\\section*{%s}")))
#+END_SRC
*** magit (F5)
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "<f5>") 'magit-status)
#+END_SRC
*** clojure-mode
#+BEGIN_SRC emacs-lisp
(defun my-clojure-mode-hook ()
  (clj-refactor-mode 1)
  (yas-minor-mode 1) ; for adding require/use/import statements
  ;; This choice of keybinding leaves cider-macroexpand-1 unbound
  (cljr-add-keybindings-with-prefix "C-c C-m"))

(add-hook 'clojure-mode-hook #'my-clojure-mode-hook)
#+END_SRC
** Theme
#+BEGIN_SRC emacs-lisp
(load-theme 'wheatgrass)
#+END_SRC
** Basic Tuning
#+BEGIN_SRC emacs-lisp
(tool-bar-mode 0)
(menu-bar-mode -1)
(scroll-bar-mode -1)
(setq inhibit-startup-message t)

(add-hook 'before-save-hook 'delete-trailing-whitespace)

(show-paren-mode 1)

(set-face-foreground 'minibuffer-prompt "white")

(setq backup-directory-alist `(("." . "~/.saves")))
#+END_SRC
*** Indentation
#+BEGIN_SRC emacs-lisp
(setq js-indent-level 2)

(add-hook 'java-mode-hook (lambda () (setq c-basic-offset 2)))
#+END_SRC
** Custom Functions
*** Indent Buffer (F12)
#+BEGIN_SRC emacs-lisp
(defun indent-buffer ()
  (interactive)
  (save-excursion
    (indent-region (point-min) (point-max) nil)))
(global-set-key [f12] 'indent-buffer)
#+END_SRC
** XEmacs (which I never use)
#+BEGIN_SRC emacs-lisp
(set-frame-font "Consolas 8")
#+END_SRC
** Pretty Symbols
#+BEGIN_SRC emacs-lisp
;;(defconst clojure--prettify-symbols-alist
;;  '(("->" . ?→)
;;    ("->>" . ?↠)
;;    ("not=" . ?≠)
;;    (">=" . ?≥)
;;    ("<=" . ?≤)
;;    ("*" . ?☣)))
;;
;;(add-hook 'emacs-lisp-mode-hook
;;	  (lambda ()
;;	    (push '(">=" . ?≥) prettify-symbols-alist)))
#+END_SRC
** Misc & Unsorted
*** Nginx
#+BEGIN_SRC emacs-lisp
(custom-set-variables
 '(nginx-indent-level 2))
#+END_SRC
*** Cider & Integrant
#+BEGIN_SRC emacs-lisp
(custom-set-variables
  '(safe-local-variable-values
     (quote
       ((cider-refresh-after-fn . "integrant.repl/resume")
        (cider-refresh-before-fn . "integrant.repl/suspend")))))
#+END_SRC
*** Unsorted
#+BEGIN_SRC emacs-lisp
(defun server-shutdown ()
  "Save buffers, Quit, and Shutdown (kill) server"
  (interactive)
  (save-some-buffers)
  (kill-emacs))

(remove-hook 'kill-buffer-query-functions 'server-kill-buffer-query-function)

(custom-set-variables
 '(org-file-apps
   (quote
    ((auto-mode . emacs)
     ("\\.mm\\'" . default)
     ("\\.x?html?\\'" . default)
     ("\\.pdf\\'" . "/usr/bin/evince %s"))))
 '(org-latex-table-caption-above nil))

(setq browse-url-browser-function 'browse-url-generic
            browse-url-generic-program "chromium")
#+END_SRC
