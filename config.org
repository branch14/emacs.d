* Emacs Configuration
** Packages
*** Package Setup

#+BEGIN_SRC emacs-lisp
  (require 'package)

  (setq package-archives
    '(("gnu" . "https://elpa.gnu.org/packages/")
      ("marmalade" . "https://marmalade-repo.org/packages/")
      ("melpa" . "https://melpa.org/packages/")))

  (package-initialize)

  (defun package (pkg)
    (unless (package-installed-p pkg)
      (package-refresh-contents)
      (package-install pkg)))
#+END_SRC

*** smex

- https://github.com/nonsequitur/smex

while Smex is active, for the currently selected command

| ~C-h f~ | runs describe-function  |
| ~M-.~   | jumps to the definition |
| ~C-h w~ | shows the key bindings  |

#+BEGIN_SRC emacs-lisp
  (package 'smex)
  (global-set-key (kbd "M-x") 'smex)
  (global-set-key (kbd "M-X") 'smex-major-mode-commands)
  ;; old M-x
  (global-set-key (kbd "C-c C-c M-x") 'execute-extended-command)
#+END_SRC

*** expand-region

- https://github.com/magnars/expand-region.el

#+BEGIN_SRC emacs-lisp
  (package 'expand-region)
  ;; why does this not work?
  (global-set-key (kbd "C-=") 'er/expand-region)
  (global-set-key (kbd "C-c e") 'er/expand-region)
#+END_SRC

*** projectile

- [[http://projectile.readthedocs.io/en/latest/][Projectile Docs]]

| =C-c p f=   | Display a list of all files in the project.                  |
| =C-c p s g= | Run grep on the files in the project.                        |
| =C-c p r=   | Runs interactive query-replace on all files in the projects. |
| =C-c p C-h= | Help                                                         |

#+BEGIN_SRC emacs-lisp
  (package 'projectile)

  (projectile-global-mode)

  (global-set-key (kbd "C-x f") 'projectile-find-file)
#+END_SRC

*** auto-complete
- [[https://github.com/auto-complete/auto-complete/blob/master/doc/manual.md][Auto-Complete User Manual]]
#+BEGIN_SRC emacs-lisp
  ;;(package 'auto-complete)
  ;;(package 'ac-js2)
  ;;
  ;;(ac-config-default)
  ;;
  ;;(eval-after-load "auto-complete"
  ;;  '(progn
  ;;     (add-to-list 'ac-modes 'coffee-mode)))
#+END_SRC

*** cider

- [[https://cider.readthedocs.io/en/latest/][Cider Docs]]
- [[https://github.com/clojure-emacs/cider/blob/master/doc/interactive_programming.md][Cider Key Bindings]]

#+BEGIN_SRC emacs-lisp
  (package 'cider)
  (package 'ac-cider)

  (require 'ac-cider)
  (add-hook 'cider-mode-hook 'ac-flyspell-workaround)
  (add-hook 'cider-mode-hook 'ac-cider-setup)
  (add-hook 'cider-repl-mode-hook 'ac-cider-setup)
  (eval-after-load "auto-complete"
    '(progn
       (add-to-list 'ac-modes 'cider-mode)
       (add-to-list 'ac-modes 'cider-repl-mode)))

  (package 'cider-eval-sexp-fu)
  ;;(add-hook 'cider-mode-hook
  ;;  '(require 'cider-eval-sexp-fu))
#+END_SRC

*** flycheck

=npm install -g eslint=

#+BEGIN_SRC emacs-lisp
  (package 'flycheck)
  (package 'flycheck-clojure)
  ;;(package 'flycheck-pos-tip)

  (add-hook 'after-init-hook #'global-flycheck-mode)

  ;; disable jshint since we prefer eslint checking
  ;;(setq-default flycheck-disabled-checkers
  ;;              (append flycheck-disabled-checkers
  ;;                      '(javascript-jshint)))

  ;; customize flycheck temp file prefix
  (setq-default flycheck-temp-prefix ".flycheck")

  ;; use local eslint from node_modules before global
  ;; http://emacs.stackexchange.com/questions/21205/flycheck-with-file-relative-eslint-executable
  (defun my/use-eslint-from-node-modules ()
    (let* ((root (locate-dominating-file
                  (or (buffer-file-name) default-directory)
                  "node_modules"))
           (eslint (and root
                        (expand-file-name "node_modules/eslint/bin/eslint.js"
                                          root))))
      (when (and eslint (file-executable-p eslint))
        (setq-local flycheck-javascript-eslint-executable eslint))))

  (add-hook 'flycheck-mode-hook #'my/use-eslint-from-node-modules)
#+END_SRC
*** flyspell
https://www.emacswiki.org/emacs/FlySpell

The german dictionary has been installed taken from here:
http://fmg-www.cs.ucla.edu/geoff/ispell-dictionaries.html#German-dicts
#+BEGIN_SRC emacs-lisp
  (setq flyspell-sort-corrections nil)

  (defun flyspell-switch-dictionary()
    "Switch between German and English dictionaries"
    (interactive)
    (let* ((dic ispell-current-dictionary)
           (change (if (string= dic "deutsch") "english" "deutsch")))
      (ispell-change-dictionary change)
      (message "Dictionary switched from %s to %s" dic change)))
#+END_SRC

*** org-mode

#+BEGIN_SRC emacs-lisp
  (custom-set-faces
   '(org-link ((t (:foreground "yellow"))))
   '(org-table ((t nil))))

  (setq calendar-week-start-day 1)
  (setq european-calendar-style 'european)
#+END_SRC

**** Custom Easy Templates

#+BEGIN_SRC emacs-lisp
  (add-to-list 'org-structure-template-alist
    '("m" "#+BEGIN_SRC emacs-lisp\n?\n#+END_SRC" "<src lang=\"emacs-lisp\">?</src>"))
#+END_SRC

**** Tufte Books & Handouts

#+BEGIN_SRC emacs-lisp
  (require 'ox-latex)
  ;; tufte-book class for writing classy books
  (add-to-list 'org-latex-classes
               '("tuftebook"
                 "\\documentclass{tufte-book}
                  \\usepackage{color}
                  \\usepackage{amssymb}
                  \\usepackage{gensymb}
                  \\usepackage{nicefrac}
                  \\usepackage{units}"
                 ("\\section{%s}" . "\\section*{%s}")
                 ("\\subsection{%s}" . "\\subsection*{%s}")
                 ("\\paragraph{%s}" . "\\paragraph*{%s}")
                 ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))

  ;; tufte-handout class for writing classy handouts and papers
  (add-to-list 'org-latex-classes
               '("tuftehandout"
                 "\\documentclass{tufte-handout}
                  \\usepackage{color}
                  \\usepackage{amssymb}
                  \\usepackage{amsmath}
                  \\usepackage{gensymb}
                  \\usepackage{nicefrac}
                  \\usepackage{units}"
                 ("\\section{%s}" . "\\section*{%s}")
                 ("\\subsection{%s}" . "\\subsection*{%s}")
                 ("\\paragraph{%s}" . "\\paragraph*{%s}")
                 ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))

  (add-to-list 'org-latex-classes
               '("scrartcl"
                 "\\documentclass{scrartcl}"
                 ("\\section{%s}" . "\\section*{%s}")))
#+END_SRC

*** magit (=F5=/=C-x g=)

- [[https://magit.vc/][Magit Website]]
- [[https://magit.vc/manual/magit.html][Magit Manual]]

#+BEGIN_SRC emacs-lisp
  (package 'magit)
  (global-set-key (kbd "C-x g") 'magit-status)
  (global-set-key (kbd "<f5>") 'magit-status)
#+END_SRC

*** clojure-mode & clj-refactor

#+BEGIN_SRC emacs-lisp
  (package 'clojure-mode)
  (package 'clj-refactor)
  (package 'clojure-snippets)

  (defun reloaded-workflow-reload ()
    (interactive)
    (cider-read-and-eval "(integrant.repl/reset)"))

  (defun my-clojure-mode-hook ()
    (clj-refactor-mode 1)
    ;; This choice of keybinding leaves cider-macroexpand-1 unbound
    (cljr-add-keybindings-with-prefix "C-c C-m")
    (local-set-key (kbd "C-c q") 'reloaded-workflow-reload))

  (add-hook 'clojure-mode-hook #'my-clojure-mode-hook)
#+END_SRC

*** JavaScript

#+BEGIN_SRC emacs-lisp
  (package 'js2-mode)
  ;;(package 'js2-refactor)

  (add-hook 'js-mode-hook 'js2-minor-mode)
  (add-to-list 'auto-mode-alist '("\\.js\\'" . js2-mode))

  (setq js-indent-level 2)
  (setq js2-basic-offset 2)
  (setq js2-strict-missing-semi-warning nil)
#+END_SRC

**** tern

#+BEGIN_SRC emacs-lisp
  ;;(package 'tern)
  ;;(package 'tern-auto-complete)
  ;;
  ;;(add-hook 'js-mode-hook (lambda () (tern-mode t)))
  ;;(add-hook 'coffee-mode-hook (lambda () (tern-mode t)))
  ;;
  ;;(eval-after-load 'tern
  ;;  '(progn
  ;;     (require 'tern-auto-complete)
  ;;     (tern-ac-setup)))
#+END_SRC

**** json

#+BEGIN_SRC emacs-lisp
  (package 'json-mode)

  ;; add hook run pretty print before save
#+END_SRC

*** free-keys

Provides a function =free-keys=, that shows free keybindings for
modkeys or prefixes.

- [[https://github.com/Fuco1/free-keys][Github]]

#+BEGIN_SRC emacs-lisp
  (package 'free-keys)
#+END_SRC

*** css, sass, scss

#+BEGIN_SRC emacs-lisp
  (package 'sass-mode)

  (setq css-indent-offset 2)
#+END_SRC

*** yasnippet

Activate th yasnippets minor mode globaly, meaning in every mode.

#+BEGIN_SRC emacs-lisp
  (package 'yasnippet)
  (yas-global-mode 1)
#+END_SRC

This allows to have snippets in =fundamental-mode=, which works in
every mode.

#+BEGIN_SRC emacs-lisp
  (add-hook 'yas-minor-mode-hook
            (lambda ()
              (yas-activate-extra-mode 'fundamental-mode)))
#+END_SRC

*** emmet-mode

#+BEGIN_SRC emacs-lisp
  (package 'emmet-mode)

  (add-hook 'sgml-mode-hook 'emmet-mode)
  (add-hook 'css-mode-hook  'emmet-mode)
#+END_SRC

*** web-mode

- http://web-mode.org/

#+BEGIN_SRC emacs-lisp
  (package 'web-mode)

  ;; adjust indents for web-mode to 2 spaces
  (defun my-web-mode-hook ()
    "Hooks for Web mode. Adjust indents"
    (setq web-mode-markup-indent-offset 2)
    (setq web-mode-css-indent-offset 2)
    (setq web-mode-code-indent-offset 2))

  (add-hook 'web-mode-hook  'my-web-mode-hook)
#+END_SRC

*** multiple-cursors

- https://github.com/magnars/multiple-cursors.el

#+BEGIN_SRC emacs-lisp
  (package 'multiple-cursors)

  (global-set-key (kbd "C-S-c C-S-c") 'mc/edit-lines)
  (global-set-key (kbd "C->") 'mc/mark-next-like-this)
  (global-set-key (kbd "C-<") 'mc/mark-previous-like-this)
  (global-set-key (kbd "C-c C-<") 'mc/mark-all-like-this)
#+END_SRC

*** crux

- https://github.com/bbatsov/crux

#+BEGIN_SRC emacs-lisp
  ;; currently broken in 24.5.1
  ;; (package 'crux)
  ;; (global-key-binding [C-k] 'crux-smart-kill-line)
#+END_SRC

*** hideshow

- https://www.emacswiki.org/emacs/HideShow

| ~C-c @ C-M-s~ | show all         |
| ~C-c @ C-M-h~ | hide all         |
| ~C-c @ C-s~   | show block       |
| ~C-c @ C-h~   | hide block       |
| ~C-c @ C-c~   | toggle hide/show |

#+BEGIN_SRC emacs-lisp
  (defun toggle-selective-display (column)
    (interactive "P")
    (set-selective-display
     (or column
         (unless selective-display
           (1+ (current-column))))))

  (defun toggle-hiding (column)
    (interactive "P")
    (if hs-minor-mode
        (if (condition-case nil
                (hs-toggle-hiding)
              (error t))
            (hs-show-all))
      (toggle-selective-display column)))

  (global-set-key (kbd "C-+") 'toggle-hiding)
  (global-set-key (kbd "C-\\") 'toggle-selective-display)

  (add-hook 'emacs-lisp-mode-hook 'hs-minor-mode)
  (add-hook 'java-mode-hook       'hs-minor-mode)
  (add-hook 'sh-mode-hook         'hs-minor-mode)
  (add-hook 'js-mode-hook         'hs-minor-mode)

  (define-prefix-command 'hideshow-map)
  (global-set-key (kbd "C-c h") 'hideshow-map)
  (global-set-key (kbd "C-c h h") 'toggle-hiding)
  (global-set-key (kbd "C-c h s") 'toggle-hiding)
  (global-set-key (kbd "C-c h M-h") 'toggle-hiding)
  (global-set-key (kbd "C-c h M-s") 'toggle-hiding)
#+END_SRC

*** Other modes & packages

**** Modes

#+BEGIN_SRC emacs-lisp
  (package 'impatient-mode)
  (package 'coffee-mode)
  (package 'enh-ruby-mode)
  (package 'graphviz-dot-mode)
  (package 'markdown-mode)
  (package 'yaml-mode)
  (package 'skewer-mode)
  (package 'dockerfile-mode)
  (package 'ledger-mode)
  (package 'haml-mode)
  (package 'nginx-mode)
  (package 'terraform-mode)
  (package 'ansible)
  (package 'ini-mode)
#+END_SRC

**** Other Packages

#+BEGIN_SRC emacs-lisp
  (package 'flycheck-ledger)
  (package 'paredit)
  (package 'yaml-tomato)
#+END_SRC

** Themes & Colors

#+BEGIN_SRC emacs-lisp
  (package 'color-theme-solarized)
  (package 'color-theme)

  (load-theme 'wheatgrass)

  (set-face-foreground 'minibuffer-prompt "white")
#+END_SRC

** Basic Tuning

Put settings set by custom into separate file

#+BEGIN_SRC emacs-lisp
(setq custom-file "~/.emacs.d/custom.el")
(load custom-file t)
#+END_SRC

Other stuff

#+BEGIN_SRC emacs-lisp
  (tool-bar-mode 0)
  (menu-bar-mode -1)
  (scroll-bar-mode -1)
  (setq inhibit-startup-message t)

  ;;(setq backup-directory-alist
  ;;      `((".*" . ,temporary-file-directory)))
  ;;(setq auto-save-file-name-transforms
  ;;      `((".*" ,temporary-file-directory t)))

  (setq vc-follow-symlinks t)

  (setq sentence-end-double-space nil)

  (fset 'yes-or-no-p 'y-or-n-p)

  (global-auto-revert-mode t)

  (add-hook 'before-save-hook 'delete-trailing-whitespace)

  (show-paren-mode 1)

  (setq backup-directory-alist `(("." . "~/.saves")))
#+END_SRC

*** Indentation

#+BEGIN_SRC emacs-lisp
  (setq-default indent-tabs-mode nil)
  (setq tab-width 2)
  (setq-default tab-always-indent 'complete)

  (add-hook 'java-mode-hook (lambda () (setq c-basic-offset 2)))
#+END_SRC

** Custom Functions
*** Moving Lines
#+BEGIN_SRC emacs-lisp
  (defun move-line (n)
    "Move the current line up or down by N lines."
    (interactive "p")
    (setq col (current-column))
    (beginning-of-line) (setq start (point))
    (end-of-line) (forward-char) (setq end (point))
    (let ((line-text (delete-and-extract-region start end)))
      (forward-line n)
      (insert line-text)
      ;; restore point to original column in moved line
      (forward-line -1)
      (forward-char col)))

  (defun move-line-up (n)
    "Move the current line up by N lines."
    (interactive "p")
    (move-line (if (null n) -1 (- n))))

  (defun move-line-down (n)
    "Move the current line down by N lines."
    (interactive "p")
    (move-line (if (null n) 1 n)))

  (global-set-key (kbd "M-<up>") 'move-line-up)
  (global-set-key (kbd "M-<down>") 'move-line-down)
#+END_SRC
*** Indent Buffer (F12)

#+BEGIN_SRC emacs-lisp
  (defun indent-buffer ()
    (interactive)
    (save-excursion
      (indent-region (point-min) (point-max) nil)))
  (global-set-key [f12] 'indent-buffer)
#+END_SRC

** Emacs GUI (which I never use)

#+BEGIN_SRC emacs-lisp
(set-frame-font "Consolas 8")
#+END_SRC

** Pretty Symbols

#+BEGIN_SRC emacs-lisp
  ;;(defconst clojure--prettify-symbols-alist
  ;;  '(("->" . ?→)
  ;;    ("->>" . ?↠)
  ;;    ("not=" . ?≠)
  ;;    (">=" . ?≥)
  ;;    ("<=" . ?≤)
  ;;    ("*" . ?☣)))
  (add-hook 'clojure-mode-hook
            (lambda ()
              (push '("fn" . ?λ) prettify-symbols-alist)))
#+END_SRC

** Misc & Unsorted

*** pwgen

Generate and insert passwords with =M-p=.

#+BEGIN_SRC emacs-lisp
  (defun generate-password ()
    "Generates and inserts a new password"
    (interactive)
    (insert
     (shell-command-to-string
      (concat "pwgen -A " (read-string "Length: " "16") " 1"))))

  ;; TODO maybe only set for org-mode
  (global-set-key (kbd "M-p") 'generate-password)
#+END_SRC

*** pretty-print

#+BEGIN_SRC emacs-lisp
  (defun pipe-buffer ()
    (interactive)
    (save-excursion
      (shell-command-on-region
       (point-min)
       (point-max)
       (read-string "Command: " "jq -M .") t t)))
#+END_SRC

*** Cider & Integrant

#+BEGIN_SRC emacs-lisp
  (defun cider-connect-and-hide-window ()
    (interactive)
    (cider-connect "localhost" "45479")
    (other-window 1)
    (delete-other-windows))

  (defun my-clojure-mode-hook2 ()
    (local-set-key (kbd "C-c w") 'cider-connect-and-hide-window))

  (add-hook 'clojure-mode-hook #'my-clojure-mode-hook2)
#+END_SRC

*** Unsorted

#+BEGIN_SRC emacs-lisp
  (defun server-shutdown ()
    "Save buffers, Quit, and Shutdown (kill) server"
    (interactive)
    (save-some-buffers)
    (kill-emacs))

  (remove-hook 'kill-buffer-query-functions 'server-kill-buffer-query-function)

  (setq browse-url-browser-function 'browse-url-generic
              browse-url-generic-program "chromium")
#+END_SRC

** References

- [[https://www.gnu.org/software/emacs/manual/html_node/eintr/index.html][An Introduction to Programming in Emacs Lisp]]
- [[https://www.gnu.org/software/emacs/manual/html_node/elisp/index.html][Emacs Lisp Reference]]
  - [[http://www.gnu.org/software/emacs/manual/html_node/elisp/Key-Binding-Conventions.html][Key Binding Conventions]]
- https://www.youtube.com/user/emacsrocks/videos
- https://github.com/emacs-tw/awesome-emacs
** Notes

*** On Key Bindings

- ~C-c <letter>~ is reserverd for the user (Yay!)

*** Buitin Commands that are hard to remember

| ~C-u M-!~ | exec shell command and insert output |
