* Emacs Configuration
** Packages
*** Package Setup
#+BEGIN_SRC emacs-lisp
  (require 'package)

  (setq package-archives
    '(("gnu" . "https://elpa.gnu.org/packages/")
      ("marmalade" . "https://marmalade-repo.org/packages/")
      ("melpa" . "https://melpa.org/packages/")))

  (package-initialize)

  (defun package (pkg)
    (unless (package-installed-p pkg)
      (package-install pkg)))
#+END_SRC
*** Someday try
- 'indium
- 'aggressive-indent
- 'company
- 'find-file-in-project
- 'with-editor
*** projectile
[[http://projectile.readthedocs.io/en/latest/][Projectile Docs]]
| =C-c p f=   | Display a list of all files in the project.                  |
| =C-c p s g= | Run grep on the files in the project.                        |
| =C-c p r=   | Runs interactive query-replace on all files in the projects. |
| =C-c p C-h= | Help                                                         |
#+BEGIN_SRC emacs-lisp
  (package 'projectile)

  (projectile-global-mode)

  (global-set-key (kbd "C-x f") 'projectile-find-file)
#+END_SRC
*** auto-complete
[[https://github.com/auto-complete/auto-complete/blob/master/doc/manual.md][Auto-Complete User Manual]]
#+BEGIN_SRC emacs-lisp
  (package 'auto-complete)
  (package 'ac-js2)

  (ac-config-default)

  (eval-after-load "auto-complete"
    '(progn
       (add-to-list 'ac-modes 'coffee-mode)))
#+END_SRC
*** cider
- [[https://cider.readthedocs.io/en/latest/][Cider Docs]]
- [[https://github.com/clojure-emacs/cider/blob/master/doc/interactive_programming.md][Cider Key Bindings]]
#+BEGIN_SRC emacs-lisp
  (package 'cider)
  (package 'ac-cider)

  (require 'ac-cider)
  (add-hook 'cider-mode-hook 'ac-flyspell-workaround)
  (add-hook 'cider-mode-hook 'ac-cider-setup)
  (add-hook 'cider-repl-mode-hook 'ac-cider-setup)
  (eval-after-load "auto-complete"
    '(progn
       (add-to-list 'ac-modes 'cider-mode)
       (add-to-list 'ac-modes 'cider-repl-mode)))

  (package 'cider-eval-sexp-fu)
  ;;(add-hook 'cider-mode-hook
  ;;  '(require 'cider-eval-sexp-fu))
#+END_SRC

*** flycheck
#+BEGIN_SRC emacs-lisp
  (package 'flycheck)
  (package 'flycheck-clojure)
  ;;(package 'flycheck-pos-tip)

  (add-hook 'after-init-hook #'global-flycheck-mode)

  ;;(eval-after-load 'flycheck
  ;;  '(setq flycheck-display-errors-function #'flycheck-pos-tip-error-messages))
#+END_SRC
*** flyspell
https://www.emacswiki.org/emacs/FlySpell

The german dictionary has been installed taken from here:
http://fmg-www.cs.ucla.edu/geoff/ispell-dictionaries.html#German-dicts
#+BEGIN_SRC emacs-lisp
  (setq flyspell-sort-corrections nil)

  (defun flyspell-switch-dictionary()
    "Switch between German and English dictionaries"
    (interactive)
    (let* ((dic ispell-current-dictionary)
           (change (if (string= dic "deutsch") "english" "deutsch")))
      (ispell-change-dictionary change)
      (message "Dictionary switched from %s to %s" dic change)))
#+END_SRC
*** org-mode
#+BEGIN_SRC emacs-lisp
  (custom-set-faces
   '(org-link ((t (:foreground "yellow"))))
   '(org-table ((t nil))))

  (setq calendar-week-start-day 1)
  (setq european-calendar-style 'european)
#+END_SRC
**** Custom Easy Templates
#+BEGIN_SRC emacs-lisp
  (add-to-list 'org-structure-template-alist
    '("m" "#+BEGIN_SRC emacs-lisp\n?\n#+END_SRC" "<src lang=\"emacs-lisp\">?</src>"))
#+END_SRC
**** Tufte Books & Handouts
#+BEGIN_SRC emacs-lisp
  (require 'ox-latex)
  ;; tufte-book class for writing classy books
  (add-to-list 'org-latex-classes
               '("tuftebook"
                 "\\documentclass{tufte-book}
                  \\usepackage{color}
                  \\usepackage{amssymb}
                  \\usepackage{gensymb}
                  \\usepackage{nicefrac}
                  \\usepackage{units}"
                 ("\\section{%s}" . "\\section*{%s}")
                 ("\\subsection{%s}" . "\\subsection*{%s}")
                 ("\\paragraph{%s}" . "\\paragraph*{%s}")
                 ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))

  ;; tufte-handout class for writing classy handouts and papers
  (add-to-list 'org-latex-classes
               '("tuftehandout"
                 "\\documentclass{tufte-handout}
                  \\usepackage{color}
                  \\usepackage{amssymb}
                  \\usepackage{amsmath}
                  \\usepackage{gensymb}
                  \\usepackage{nicefrac}
                  \\usepackage{units}"
                 ("\\section{%s}" . "\\section*{%s}")
                 ("\\subsection{%s}" . "\\subsection*{%s}")
                 ("\\paragraph{%s}" . "\\paragraph*{%s}")
                 ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))

  (add-to-list 'org-latex-classes
               '("scrartcl"
                 "\\documentclass{scrartcl}"
                 ("\\section{%s}" . "\\section*{%s}")))
#+END_SRC
*** magit (=F5=/=C-x g=)
[[https://magit.vc/][Magit Website]]
#+BEGIN_SRC emacs-lisp
  (package 'magit)
  (global-set-key (kbd "C-x g") 'magit-status)
  (global-set-key (kbd "<f5>") 'magit-status)
#+END_SRC
*** clojure-mode & clj-refactor
#+BEGIN_SRC emacs-lisp
  (package 'clojure-mode)
  (package 'clj-refactor)

  (defun reloaded-workflow-reload ()
    (interactive)
    (cider-read-and-eval "(integrant.repl/reset)"))

  (defun my-clojure-mode-hook ()
    (clj-refactor-mode 1)
    (yas-minor-mode 1) ; for adding require/use/import statements
    ;; This choice of keybinding leaves cider-macroexpand-1 unbound
    (cljr-add-keybindings-with-prefix "C-c C-m")
    (local-set-key (kbd "C-c q") 'reloaded-workflow-reload))

  (add-hook 'clojure-mode-hook #'my-clojure-mode-hook)
#+END_SRC
*** JavaScript
#+BEGIN_SRC emacs-lisp
  (package 'js2-mode)
  ;;(package 'js2-refactor)

  (add-hook 'js-mode-hook 'js2-minor-mode)
  (add-to-list 'auto-mode-alist '("\\.js\\'" . js2-mode))

  (setq js-indent-level 2)
  (setq js2-basic-offset 2)
  (setq js2-strict-missing-semi-warning nil)
#+END_SRC
**** tern
#+BEGIN_SRC emacs-lisp
  (package 'tern)
  (package 'tern-auto-complete)

  (add-hook 'js-mode-hook (lambda () (tern-mode t)))
  (add-hook 'coffee-mode-hook (lambda () (tern-mode t)))

  (eval-after-load 'tern
    '(progn
       (require 'tern-auto-complete)
       (tern-ac-setup)))
#+END_SRC

*** free-keys
Provides a function =free-keys=, that shows free keybindings for
modkeys or prefixes.

- [[https://github.com/Fuco1/free-keys][Github]]
#+BEGIN_SRC emacs-lisp
  (package 'free-keys)
#+END_SRC
*** css, sass, scss
#+BEGIN_SRC emacs-lisp
  (package 'sass-mode)

  (setq css-indent-offset 2)
#+END_SRC
*** Other modes & packages
#+BEGIN_SRC emacs-lisp
  (package 'coffee-mode)
  (package 'enh-ruby-mode)
  (package 'graphviz-dot-mode)
  (package 'markdown-mode)
  (package 'yaml-mode)
  (package 'impatient-mode)
  (package 'web-mode)
  (package 'skewer-mode)
  (package 'dockerfile-mode)
  (package 'emmet-mode)
  (package 'ledger-mode)
  (package 'flycheck-ledger)
  (package 'haml-mode)
  (package 'nginx-mode)
  (package 'yasnippet)
  (package 'multiple-cursors)
  (package 'paredit)
  (package 'yaml-tomato)
  (package 'terraform-mode)
  (package 'ansible)
#+END_SRC
** Theme
#+BEGIN_SRC emacs-lisp
  (package 'color-theme-solarized)
  (package 'color-theme)

  (load-theme 'wheatgrass)
#+END_SRC
** Basic Tuning
#+BEGIN_SRC emacs-lisp
  (tool-bar-mode 0)
  (menu-bar-mode -1)
  (scroll-bar-mode -1)
  (setq inhibit-startup-message t)

  (add-hook 'before-save-hook 'delete-trailing-whitespace)

  (show-paren-mode 1)

  (set-face-foreground 'minibuffer-prompt "white")

  (setq backup-directory-alist `(("." . "~/.saves")))
#+END_SRC
*** Indentation
#+BEGIN_SRC emacs-lisp
  (add-hook 'java-mode-hook (lambda () (setq c-basic-offset 2)))
#+END_SRC
** Custom Functions
*** Indent Buffer (F12)
#+BEGIN_SRC emacs-lisp
  (defun indent-buffer ()
    (interactive)
    (save-excursion
      (indent-region (point-min) (point-max) nil)))
  (global-set-key [f12] 'indent-buffer)
#+END_SRC
** Emacs GUI (which I never use)
#+BEGIN_SRC emacs-lisp
(set-frame-font "Consolas 8")
#+END_SRC
** Pretty Symbols
#+BEGIN_SRC emacs-lisp
  ;;(defconst clojure--prettify-symbols-alist
  ;;  '(("->" . ?→)
  ;;    ("->>" . ?↠)
  ;;    ("not=" . ?≠)
  ;;    (">=" . ?≥)
  ;;    ("<=" . ?≤)
  ;;    ("*" . ?☣)))
  (add-hook 'clojure-mode-hook
            (lambda ()
              (push '("fn" . ?λ) prettify-symbols-alist)))
#+END_SRC
** Misc & Unsorted
*** pwgen
Generate and insert passwords with =M-p=.
#+BEGIN_SRC emacs-lisp
  (defun generate-password ()
    "Generates and inserts a new password"
    (interactive)
    (insert
     (shell-command-to-string
      (concat "pwgen -A " (read-string "Length: " "16") " 1"))))

  ;; TODO maybe only set for org-mode
  (global-set-key (kbd "M-p") 'generate-password)
#+END_SRC
*** Nginx
#+BEGIN_SRC emacs-lisp
  (custom-set-variables
   '(nginx-indent-level 2))
#+END_SRC
*** Cider & Integrant
#+BEGIN_SRC emacs-lisp
  (custom-set-variables
    '(safe-local-variable-values
       (quote
         ((cider-refresh-after-fn . "integrant.repl/resume")
          (cider-refresh-before-fn . "integrant.repl/suspend")))))

  (defun cider-connect-and-hide-window ()
    (interactive)
    (cider-connect "localhost" "45479")
    (other-window 1)
    (delete-other-windows))

  (defun my-clojure-mode-hook2 ()
    (local-set-key (kbd "C-c w") 'cider-connect-and-hide-window))

  (add-hook 'clojure-mode-hook #'my-clojure-mode-hook2)
#+END_SRC
*** Unsorted
#+BEGIN_SRC emacs-lisp
  (defun server-shutdown ()
    "Save buffers, Quit, and Shutdown (kill) server"
    (interactive)
    (save-some-buffers)
    (kill-emacs))

  (remove-hook 'kill-buffer-query-functions 'server-kill-buffer-query-function)

  (custom-set-variables
   '(org-file-apps
     (quote
      ((auto-mode . emacs)
       ("\\.mm\\'" . default)
       ("\\.x?html?\\'" . default)
       ("\\.pdf\\'" . "/usr/bin/evince %s"))))
   '(org-latex-table-caption-above nil))

  (setq browse-url-browser-function 'browse-url-generic
              browse-url-generic-program "chromium")
#+END_SRC
